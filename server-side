#ifndef __INC_PACKET_H__
#define __INC_PACKET_H__

enum
{
	HEADER_CG_HANDSHAKE				= 0xff,
	HEADER_CG_PONG				= 0xfe,
	HEADER_CG_TIME_SYNC				= 0xfc,
	HEADER_CG_KEY_AGREEMENT			= 0xfb, // _IMPROVED_PACKET_ENCRYPTION_

	HEADER_CG_LOGIN							= 1,
	HEADER_CG_ATTACK						= 2,
	HEADER_CG_CHAT							= 3,
	HEADER_CG_CHARACTER_CREATE				= 4,
	HEADER_CG_CHARACTER_DELETE				= 5,
	HEADER_CG_CHARACTER_SELECT				= 6,
	HEADER_CG_MOVE							= 7,
	HEADER_CG_SYNC_POSITION					= 8,
	HEADER_CG_DIRECT_ENTER					= 9,	/*** Only Client ***/
	HEADER_CG_ENTERGAME						= 10,
	HEADER_CG_ITEM_USE						= 11,
#ifdef  __ENABLE_DROP_DIALOG_EX__
	HEADER_CG_ITEM_DELETE					= 12,
#else
	HEADER_CG_ITEM_DROP						= 12,
#endif
	HEADER_CG_ITEM_MOVE						= 13,
#ifdef __ENABLE_DROP_DIALOG_EX__
	HEADER_CG_ITEM_SELL						= 14,
#endif
	HEADER_CG_ITEM_PICKUP					= 15,
	HEADER_CG_QUICKSLOT_ADD					= 16,
	HEADER_CG_QUICKSLOT_DEL					= 17,
	HEADER_CG_QUICKSLOT_SWAP				= 18,
	HEADER_CG_WHISPER						= 19,
#ifndef __ENABLE_DROP_DIALOG_EX__
	HEADER_CG_ITEM_DROP2					= 20,
#endif
	HEADER_CG_ON_CLICK						= 21,
	HEADER_CG_EXCHANGE						= 22,
	HEADER_CG_CHARACTER_POSITION			= 23,
	HEADER_CG_SCRIPT_ANSWER					= 24,
	HEADER_CG_QUEST_INPUT_STRING			= 25,
	HEADER_CG_QUEST_CONFIRM					= 26,
	HEADER_CG_PVP							= 27,	/*** Only Client ***/
	HEADER_CG_SHOP							= 28,
	HEADER_CG_FLY_TARGETING					= 29,
	HEADER_CG_USE_SKILL						= 30,
	HEADER_CG_ADD_FLY_TARGETING				= 31,
	HEADER_CG_SHOOT							= 32,
	HEADER_CG_MYSHOP						= 33,
	HEADER_CG_ITEM_USE_TO_ITEM				= 34,
	HEADER_CG_TARGET			 			= 35,
	HEADER_CG_TEXT							= 36,	/*** Only Server ***/
	HEADER_CG_WARP							= 38,
	HEADER_CG_SCRIPT_BUTTON					= 39,
	HEADER_CG_MESSENGER						= 40,
	HEADER_CG_MALL_CHECKOUT					= 41,
	HEADER_CG_SAFEBOX_CHECKIN				= 42,
	HEADER_CG_SAFEBOX_CHECKOUT				= 43,
	HEADER_CG_PARTY_INVITE					= 44,
	HEADER_CG_PARTY_INVITE_ANSWER			= 45,
	HEADER_CG_PARTY_REMOVE					= 46,
	HEADER_CG_PARTY_SET_STATE				= 47,
	HEADER_CG_PARTY_USE_SKILL				= 48,
	HEADER_CG_SAFEBOX_ITEM_MOVE				= 49,
	HEADER_CG_PARTY_PARAMETER				= 50,
	HEADER_CG_GUILD							= 51,
	HEADER_CG_ANSWER_MAKE_GUILD				= 52,
	HEADER_CG_FISHING						= 53,
	HEADER_CG_ITEM_GIVE						= 54,
	HEADER_CG_EMPIRE						= 55,
	HEADER_CG_REFINE						= 56,
	HEADER_CG_MARK_LOGIN					= 57,
	HEADER_CG_MARK_CRCLIST					= 58,
	HEADER_CG_MARK_UPLOAD					= 59,
	HEADER_CG_MARK_IDXLIST					= 60,
	HEADER_CG_CRC_REPORT					= 61,	/*** Only Server ***/
	HEADER_CG_HACK							= 62,
	HEADER_CG_CHANGE_NAME					= 63,
	HEADER_CG_LOGIN2						= 64,
	HEADER_CG_DUNGEON						= 65,
	HEADER_CG_LOGIN3						= 69,	/*** Not Sorted ***/
	HEADER_CG_GUILD_SYMBOL_UPLOAD			= 66,
	HEADER_CG_SYMBOL_CRC					= 67,
	HEADER_CG_SCRIPT_SELECT_ITEM			= 68,
	HEADER_CG_LOGIN4						= 233,	/*** Only Client ***/
	HEADER_CG_DRAGON_SOUL_REFINE			= 70,
	HEADER_CG_STATE_CHECKER					= 71,
#ifdef __ENABLE_SHOP_SEARCH_SYSTEM__
	HEADER_CG_SHOP_SEARCH					= 72,
	HEADER_CG_SHOP_SEARCH_SUB				= 73,
	HEADER_CG_SHOP_SEARCH_BUY				= 74,
#endif
#ifdef __ENABLE_EXTEND_INVEN_SYSTEM__
	HEADER_CG_EXTEND_INVENTORY 				= 76,
#endif
	HEADER_CG_BULK_WHISPER					= 80,
#ifdef CHANGE_SKILL_COLOR
	HEADER_CG_SKILL_COLOR					= 81,
#endif
#ifdef __ENABLE_NEW_PICKUP_SYSTEM__
	HEADER_CG_ITEM_PICKUP_NEW				= 82,
#endif
#ifdef __ENABLE_NEW_QUICK_SLOT_SYSTEM__
	HEADER_CG_NEWQUICKSLOT_ADD				= 84,
	HEADER_CG_NEWQUICKSLOT_DEL				= 85,
	HEADER_CG_NEWQUICKSLOT_SWAP				= 86,
#endif
#ifdef __ENABLE_MAILBOX_SYSTEM__
	HEADER_CG_MAILBOX_SEND					= 87,
#endif
#ifdef __SEND_TARGET_INFO__
	HEADER_CG_TARGET_INFO_LOAD				= 89,
#endif
#ifdef __ENABLE_CHANGELOOK_SYSTEM__
	HEADER_CG_CL 							= 90,
#endif
#ifdef __SASH_SYSTEM__
	HEADER_CG_SASH 							= 91,
#endif
#ifdef __ENABLE_FISH_EVENT_SYSTEM__
	HEADER_CG_FISH_EVENT_SEND 				= 92,
#endif
#ifdef ENABLE_NEW_PET_SYSTEM
	HEADER_CG_PetSetName					= 93,
#endif
#ifdef ENABLE_PET_SYSTEM
	HEADER_CG_PetSetName 					= 147,
	HEADER_CG_PET							= 148,
#endif

	HEADER_CG_CLIENT_VERSION				= 0xfd,
	HEADER_CG_CLIENT_VERSION2				= 0xf1,

	/********************************************************/
	HEADER_GC_KEY_AGREEMENT_COMPLETED 		= 0xfa,
	HEADER_GC_KEY_AGREEMENT					= 0xfb,
	HEADER_GC_TIME_SYNC						= 0xfc,
	HEADER_GC_PHASE							= 0xfd,
	HEADER_GC_BINDUDP						= 0xfe,
	HEADER_GC_HANDSHAKE						= 0xff,

	HEADER_GC_CHARACTER_ADD								= 1,
	HEADER_GC_CHARACTER_DEL								= 2,
	HEADER_GC_MOVE										= 3,
	HEADER_GC_CHAT										= 4,
	HEADER_GC_SYNC_POSITION								= 5,
	HEADER_GC_LOGIN_SUCCESS								= 6,
	HEADER_GC_LOGIN_FAILURE								= 7,
	HEADER_GC_CHARACTER_CREATE_SUCCESS					= 8,
	HEADER_GC_CHARACTER_CREATE_FAILURE					= 9,
	HEADER_GC_CHARACTER_DELETE_SUCCESS					= 10,
	HEADER_GC_CHARACTER_DELETE_WRONG_SOCIAL_ID			= 11,
	HEADER_GC_ATTACK									= 12,
	HEADER_GC_STUN										= 13,
	HEADER_GC_DEAD										= 14,
	HEADER_GC_MAIN_CHARACTER_OLD						= 15,
	HEADER_GC_CHARACTER_POINTS							= 16,
	HEADER_GC_CHARACTER_POINT_CHANGE					= 17,
	HEADER_GC_CHANGE_SPEED								= 18,
	HEADER_GC_CHARACTER_UPDATE							= 19,
	HEADER_GC_CHARACTER_UPDATE_NEW						= 20,	/*** Only Server ***/
	HEADER_GC_ITEM_DEL									= 21,
	HEADER_GC_ITEM_SET									= 22,
	HEADER_GC_ITEM_USE									= 23,
	HEADER_GC_ITEM_DROP									= 24,
	HEADER_GC_ITEM_UPDATE								= 25,
	HEADER_GC_ITEM_GROUND_ADD							= 26,
	HEADER_GC_ITEM_GROUND_DEL							= 27,
	HEADER_GC_QUICKSLOT_ADD								= 28,
	HEADER_GC_QUICKSLOT_DEL								= 29,
	HEADER_GC_QUICKSLOT_SWAP							= 30,
	HEADER_GC_ITEM_OWNERSHIP							= 31,
	HEADER_GC_LOGIN_SUCCESS_NEWSLOT						= 32, /*** Only Client ***/
	HEADER_GC_WHISPER									= 33,
	HEADER_GC_MOTION									= 34,
	HEADER_GC_PARTS										= 35,
	HEADER_GC_SHOP										= 36,
	HEADER_GC_SHOP_SIGN									= 37,
	HEADER_GC_DUEL_START								= 38,
	HEADER_GC_PVP										= 39,
	HEADER_GC_EXCHANGE									= 40,
	HEADER_GC_CHARACTER_POSITION						= 41,
	HEADER_GC_PING										= 42,
	HEADER_GC_SCRIPT									= 43,
	HEADER_GC_QUEST_CONFIRM								= 44,
	HEADER_GC_UPDATE_PART 								= 45,
	HEADER_GC_MOUNT										= 46,
	HEADER_GC_OWNERSHIP									= 47,
	HEADER_GC_TARGET			 						= 48,
	HEADER_GC_WARP										= 49,
	HEADER_GC_ADD_FLY_TARGETING							= 50,
	HEADER_GC_CREATE_FLY								= 51,
	HEADER_GC_FLY_TARGETING								= 52,
	HEADER_GC_SKILL_LEVEL_OLD							= 53,
	HEADER_GC_SKILL_LEVEL								= 54,	/*** Only Client ***/
	HEADER_GC_MESSENGER									= 55,
	HEADER_GC_GUILD										= 56,
	HEADER_GC_PARTY_INVITE								= 57,
	HEADER_GC_PARTY_ADD									= 58,
	HEADER_GC_PARTY_UPDATE								= 59,
	HEADER_GC_PARTY_REMOVE								= 60,
	HEADER_GC_QUEST_INFO								= 61,
	HEADER_GC_REQUEST_MAKE_GUILD						= 62,
	HEADER_GC_PARTY_PARAMETER							= 63,
	HEADER_GC_SAFEBOX_SET								= 64,
	HEADER_GC_SAFEBOX_DEL								= 65,
	HEADER_GC_SAFEBOX_WRONG_PASSWORD					= 66,
	HEADER_GC_SAFEBOX_SIZE								= 67,
	HEADER_GC_FISHING									= 68,
	HEADER_GC_EMPIRE									= 69,
	HEADER_GC_PARTY_LINK								= 70,
	HEADER_GC_PARTY_UNLINK								= 71,
	HEADER_GC_REFINE_INFORMATION_OLD					= 72,
	HEADER_GC_OBSERVER_ADD								= 73,	/*** Only Client ***/
	HEADER_GC_OBSERVER_REMOVE							= 74,	/*** Only Client ***/
	HEADER_GC_OBSERVER_MOVE								= 75,	/*** Only Client ***/
	HEADER_GC_MARK_BLOCK								= 76,
	HEADER_GC_MARK_DIFF_DATA							= 77,	/*** Only Client ***/
	HEADER_GC_MARK_IDXLIST								= 78,
	HEADER_GC_TIME										= 79,
	HEADER_GC_CHANGE_NAME								= 80,
	HEADER_GC_DUNGEON									= 81,
	HEADER_GC_WALK_MODE									= 82,
	HEADER_GC_SKILL_GROUP								= 83,
	HEADER_GC_MAIN_CHARACTER							= 84,
	HEADER_GC_SEPCIAL_EFFECT							= 85,
	HEADER_GC_NPC_POSITION								= 86,
	HEADER_GC_CHARACTER_UPDATE2							= 87,	/*** Only Client ***/
	HEADER_GC_LOGIN_KEY									= 88,
	HEADER_GC_REFINE_INFORMATION						= 89,
	HEADER_GC_CHARACTER_ADD2                  			= 90,	/*** Only Client ***/
	HEADER_GC_CHANNEL									= 91,
	HEADER_GC_TARGET_UPDATE								= 92,
	HEADER_GC_TARGET_DELETE								= 93,
	HEADER_GC_TARGET_CREATE								= 94,
	HEADER_GC_AFFECT_ADD								= 95,
	HEADER_GC_AFFECT_REMOVE								= 96,
	HEADER_GC_MALL_OPEN									= 97,
	HEADER_GC_MALL_SET									= 98,
	HEADER_GC_MALL_DEL									= 99,
	HEADER_GC_LAND_LIST									= 100,
	HEADER_GC_LOVER_INFO								= 101,
	HEADER_GC_LOVE_POINT_UPDATE							= 102,
	HEADER_GC_SYMBOL_DATA								= 103,
	HEADER_GC_DIG_MOTION								= 104,
	HEADER_GC_DAMAGE_INFO           					= 105,
	HEADER_GC_CHAR_ADDITIONAL_INFO						= 106,
	HEADER_GC_MAIN_CHARACTER3_BGM						= 107,
	HEADER_GC_MAIN_CHARACTER4_BGM_VOL					= 108,
	HEADER_GC_AUTH_SUCCESS								= 109,
	HEADER_GC_HYBRIDCRYPT_KEYS							= 110,
	HEADER_GC_HYBRIDCRYPT_SDB							= 111,
	HEADER_GC_SPECIFIC_EFFECT							= 112,
	HEADER_GC_DRAGON_SOUL_REFINE						= 113,
	HEADER_GC_RESPOND_CHANNELSTATUS						= 114,
#ifdef __ENABLE_EVENT_SYSTEM__
	HEADER_GC_EVENT_INFO								= 115,
#endif
#ifdef __ENABLE_SUPPORT_SHAMAN_SYSTEM__
	HEADER_GC_SUPPORT_SHAMAN_SKILL						= 118,
#endif
#ifdef __ENABLE_HEALTH_BOARD_SYSTEM__
	HEADER_GC_HEALTH_BOARD								= 119,
#endif
#ifdef __ENABLE_EXTEND_INVEN_SYSTEM__
	HEADER_GC_EXTEND_INVENTORY							= 120,
#endif
#ifdef __ENABLE_EXCHANGE_WINDOW_SYSTEM__
	HEADER_GC_EXCHANGE_INFO								= 121,
#endif
#ifdef __ENABLE_NEW_QUICK_SLOT_SYSTEM__
	HEADER_GC_NEWQUICKSLOT_ADD							= 123,
	HEADER_GC_NEWQUICKSLOT_DEL							= 124,
	HEADER_GC_NEWQUICKSLOT_SWAP							= 125,
#endif
#ifdef __ENABLE_MAILBOX_SYSTEM__
	HEADER_GC_MAILBOX_RECEIVE							= 126,
#endif
	HEADER_GC_BULK_WHISPER								= 127,
#ifdef __SEND_TARGET_INFO__
	HEADER_GC_TARGET_INFO								= 128,
#endif
#ifdef __ENABLE_VIEW_EQUIPMENT_SYSTEM__
	HEADER_GC_VIEW_EQUIP								= 129,
#endif
#ifdef __ENABLE_SHOP_SEARCH_SYSTEM__
	HEADER_GC_SHOPSEARCH_SET							= 130,
#endif
#ifdef __ENABLE_CHANGELOOK_SYSTEM__
	HEADER_GC_CL 										= 131,
#endif	
#ifdef __SASH_SYSTEM__
	HEADER_GC_SASH 										= 132,
#endif
#ifdef __ENABLE_FISH_EVENT_SYSTEM__
	HEADER_GC_FISH_EVENT_INFO 							= 133,
#endif
#ifdef ENABLE_BLOOD_DUNGEON_SYSTEM
	HEADER_GC_BLOOD_DUNGEON 							= 134,
#endif
#ifdef ENABLE_PET_SYSTEM
	HEADER_GC_PET_SYSTEM 								= 135,
#endif
#ifdef ENABLE_BOSS_TRACKING
	HEADER_GC_BOSS_TRACKING 							= 140,
#endif

	/////////////////////////////////////////////////////////////////////////////

	HEADER_GG_LOGIN									= 1,
	HEADER_GG_LOGOUT								= 2,
	HEADER_GG_RELAY									= 3,
	HEADER_GG_NOTICE								= 4,
	HEADER_GG_SHUTDOWN								= 5,
	HEADER_GG_GUILD									= 6,
	HEADER_GG_DISCONNECT							= 7,
	HEADER_GG_SHOUT									= 8,
	HEADER_GG_SETUP									= 9,
	HEADER_GG_MESSENGER_ADD							= 10,
	HEADER_GG_MESSENGER_REMOVE						= 11,
	HEADER_GG_FIND_POSITION							= 12,
	HEADER_GG_WARP_CHARACTER						= 13,
	HEADER_GG_MESSENGER_MOBILE						= 14,
	HEADER_GG_GUILD_WAR_ZONE_MAP_INDEX				= 15,
	HEADER_GG_TRANSFER								= 16,
	HEADER_GG_XMAS_WARP_SANTA						= 17,
	HEADER_GG_XMAS_WARP_SANTA_REPLY					= 18,
	HEADER_GG_RELOAD_CRC_LIST						= 19,
	HEADER_GG_LOGIN_PING							= 20,
	HEADER_GG_CHECK_CLIENT_VERSION					= 21,
	HEADER_GG_BLOCK_CHAT							= 22,
	HEADER_GG_SIEGE									= 24,
	HEADER_GG_MONARCH_NOTICE						= 25,
	HEADER_GG_MONARCH_TRANSFER						= 26,
	HEADER_GG_PCBANG_UPDATE							= 27,
	HEADER_GG_CHECK_AWAKENESS						= 28,
	HEADER_GG_GUILD_NOTICE 							= 31,
	HEADER_GG_BULK_WHISPER							= 32,
	
	HEADER_GG_REQUEST_DUNGEON_WARP					= 33,
	HEADER_GG_ANSWER_DUNGEON_WARP					= 34,	
	HEADER_GG_RELOAD_COMMAND						= 35,
#ifdef __ENABLE_FULL_NOTICE__
	HEADER_GG_BIG_NOTICE							= 36,
#endif
#ifdef __CHAT_TYPE_SHOUT_TRADE__
	HEADER_GG_TRADE									= 37,
#endif
#ifdef __CHAT_TYPE_BOSS_NOTICE__
	HEADER_GG_NOTICE_BOSS							= 38,
#endif
	HEADER_GG_MUZIK_EVENT							= 50,
#ifdef __ENABLE_CORE_SHOP_SEARCH_SYSTEM__
	HEADER_GG_SHOP_SEARCH							= 51,
#ifdef __ENABLE_CORE_SHOP_SEARCH_BUY_SYSTEM__
	HEADER_GG_SHOP_SEARCH_BUY						= 52,
#endif
#endif
#ifdef OFFLINE_SHOP_PM_NOTICE
	HEADER_GG_OFFLINE_SHOP_SEND_MESSAGE				= 53,
#endif
#ifdef ENABLE_BOSS_TRACKING
	HEADER_GG_BOSS_TRACKING							= 54,
#endif
};

#pragma pack(1)
typedef struct SPacketGGSetup
{
	BYTE	bHeader;
	WORD	wPort;
	BYTE	bChannel;
} TPacketGGSetup;

typedef struct SPacketGGLogin
{
	BYTE	bHeader;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
	DWORD	dwPID;
	BYTE	bEmpire;
	long	lMapIndex;
	BYTE	bChannel;
	int		iLevel;
} TPacketGGLogin;

typedef struct SPacketGGLogout
{
	BYTE	bHeader;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
} TPacketGGLogout;

typedef struct SPacketGGRelay
{
	BYTE	bHeader;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
	long	lSize;
} TPacketGGRelay;

typedef struct SPacketGGNotice
{
	BYTE	bHeader;
	long	lSize;
} TPacketGGNotice;

#ifdef __CHAT_TYPE_BOSS_NOTICE__
typedef struct SPacketGGNoticeBoss
{
	BYTE	bHeader;
	long	lSize;
} TPacketGGNoticeBoss;
#endif

typedef struct SPacketGGMonarchNotice
{
	BYTE	bHeader;
	BYTE	bEmpire;
	long	lSize;
} TPacketGGMonarchNotice;

typedef struct SPacketGGGuildNotice
{
	BYTE	bHeader;
	DWORD	dwGuildID;
	long	lSize;
} TPacketGGGuildNotice;

//FORKED_ROAD
typedef struct SPacketGGForkedMapInfo
{
	BYTE	bHeader;
	BYTE	bPass;
	BYTE	bSungzi;
} TPacketGGForkedMapInfo;
//END_FORKED_ROAD
typedef struct SPacketGGShutdown
{
	BYTE	bHeader;
} TPacketGGShutdown;

typedef struct SPacketGGGuild
{
	BYTE	bHeader;
	BYTE	bSubHeader;
	DWORD	dwGuild;
} TPacketGGGuild;

enum
{
	GUILD_SUBHEADER_GG_CHAT,
	GUILD_SUBHEADER_GG_SET_MEMBER_COUNT_BONUS,
};

typedef struct SPacketGGGuildChat
{
	BYTE	bHeader;
	BYTE	bSubHeader;
	DWORD	dwGuild;
	char	szText[CHAT_MAX_LEN + 1];
} TPacketGGGuildChat;

typedef struct SPacketGGParty
{
	BYTE	header;
	BYTE	subheader;
	DWORD	pid;
	DWORD	leaderpid;
} TPacketGGParty;

enum
{
	PARTY_SUBHEADER_GG_CREATE,
	PARTY_SUBHEADER_GG_DESTROY,
	PARTY_SUBHEADER_GG_JOIN,
	PARTY_SUBHEADER_GG_QUIT,
};

typedef struct SPacketGGDisconnect
{
	BYTE	bHeader;
	char	szLogin[LOGIN_MAX_LEN + 1];
} TPacketGGDisconnect;

typedef struct SPacketGGShout
{
	BYTE	bHeader;
	BYTE	bEmpire;
	char	szText[CHAT_MAX_LEN + 1];
} TPacketGGShout;

#ifdef __CHAT_TYPE_SHOUT_TRADE__
typedef struct SPacketGGTrade
{
	BYTE	bHeader;
	BYTE	bEmpire;
	char	szText[CHAT_MAX_LEN + 1];
} TPacketGGTrade;
#endif

typedef struct SPacketGGXmasWarpSanta
{
	BYTE	bHeader;
	BYTE	bChannel;
	long	lMapIndex;
} TPacketGGXmasWarpSanta;

typedef struct SPacketGGXmasWarpSantaReply
{
	BYTE	bHeader;
	BYTE	bChannel;
} TPacketGGXmasWarpSantaReply;

typedef struct SMessengerData
{
	char        szMobile[MOBILE_MAX_LEN + 1];
} TMessengerData;

typedef struct SPacketGGMessenger
{   
	BYTE        bHeader;
	char        szAccount[CHARACTER_NAME_MAX_LEN + 1];
	char        szCompanion[CHARACTER_NAME_MAX_LEN + 1];
} TPacketGGMessenger;

typedef struct SPacketGGMessengerMobile
{   
	BYTE        bHeader;
	char        szName[CHARACTER_NAME_MAX_LEN + 1];
	char        szMobile[MOBILE_MAX_LEN + 1];
} TPacketGGMessengerMobile;

typedef struct SPacketGGFindPosition
{
	BYTE header;
	DWORD dwFromPID; // 저 위치로 워프하려는 사람
	DWORD dwTargetPID; // 찾는 사람
} TPacketGGFindPosition;

typedef struct SPacketGGWarpCharacter
{
	BYTE header;
	DWORD pid;
	long x;
	long y;
#ifdef ENABLE_CMD_WARP_IN_DUNGEON
	int mapIndex;
#endif
} TPacketGGWarpCharacter;

//  HEADER_GG_GUILD_WAR_ZONE_MAP_INDEX	    = 15,

typedef struct SPacketGGGuildWarMapIndex
{
	BYTE bHeader;
	DWORD dwGuildID1;
	DWORD dwGuildID2;
	long lMapIndex;
} TPacketGGGuildWarMapIndex;

typedef struct SPacketGGTransfer
{
	BYTE	bHeader;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
	long	lX, lY;
} TPacketGGTransfer;

typedef struct SPacketGGLoginPing
{
	BYTE	bHeader;
	char	szLogin[LOGIN_MAX_LEN + 1];
} TPacketGGLoginPing;

typedef struct SPacketGGBlockChat
{
	BYTE	bHeader;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
	long	lBlockDuration;
} TPacketGGBlockChat;

/* 클라이언트 측에서 보내는 패킷 */

typedef struct command_text
{
	BYTE	bHeader;
} TPacketCGText;

/* 로그인 (1) */
typedef struct command_handshake
{
	BYTE	bHeader;
	DWORD	dwHandshake;
	DWORD	dwTime;
	long	lDelta;
} TPacketCGHandshake;

typedef struct command_login
{
	BYTE	header;
	char	login[LOGIN_MAX_LEN + 1];
	char	passwd[PASSWD_MAX_LEN + 1];
} TPacketCGLogin;

typedef struct command_login2
{
	BYTE	header;
	char	login[LOGIN_MAX_LEN + 1];
	DWORD	dwLoginKey;
	DWORD	adwClientKey[4];
} TPacketCGLogin2;

typedef struct command_login3
{
	BYTE	header;
	char	login[LOGIN_MAX_LEN + 1];
	char	passwd[PASSWD_MAX_LEN + 1];
	DWORD	adwClientKey[4];
#ifdef __ENABLE_HWID_BAN_SYSTEM__
	char	cpu_id[CPU_ID_MAX_LEN + 1];
	char	hdd_model[HDD_MODEL_MAX_LEN + 1];
	char	machine_guid[MACHINE_GUID_MAX_LEN + 1];
	char	mac_addr[MAC_ADDR_MAX_LEN + 1];
	char	hdd_serial[HDD_SERIAL_MAX_LEN + 1];
#endif
} TPacketCGLogin3;

typedef struct packet_login_key
{
	BYTE	bHeader;
	DWORD	dwLoginKey;
} TPacketGCLoginKey;

typedef struct command_player_select
{
	BYTE	header;
	BYTE	index;
} TPacketCGPlayerSelect;

typedef struct command_player_delete
{
	BYTE	header;
	BYTE	index;
	char	private_code[8];
} TPacketCGPlayerDelete;

typedef struct command_player_create
{
	BYTE        header;
	BYTE        index;
	char        name[CHARACTER_NAME_MAX_LEN + 1];
	WORD        job;
	BYTE	shape;
	BYTE	Con;
	BYTE	Int;
	BYTE	Str;
	BYTE	Dex;
} TPacketCGPlayerCreate;

typedef struct command_player_create_success
{
	BYTE		header;
	BYTE		bAccountCharacterIndex;
	TSimplePlayer	player;
} TPacketGCPlayerCreateSuccess;

// 공격
typedef struct command_attack
{
	BYTE	bHeader;
	BYTE	bType;
	DWORD	dwVID;
	BYTE	bCRCMagicCubeProcPiece;
	BYTE	bCRCMagicCubeFilePiece;
} TPacketCGAttack;

enum EMoveFuncType
{
	FUNC_WAIT,
	FUNC_MOVE,
	FUNC_ATTACK,
	FUNC_COMBO,
	FUNC_MOB_SKILL,
	_FUNC_SKILL,
	FUNC_MAX_NUM,
	FUNC_SKILL = 0x80,
};

// 이동
typedef struct command_move
{
	BYTE	bHeader;
	BYTE	bFunc;
	BYTE	bArg;
	BYTE	bRot;
	long	lX;
	long	lY;
	DWORD	dwTime;
} TPacketCGMove;

typedef struct command_sync_position_element
{
	DWORD	dwVID;
	long	lX;
	long	lY;
} TPacketCGSyncPositionElement;

// 위치 동기화
typedef struct command_sync_position	// 가변 패킷
{
	BYTE	bHeader;
	WORD	wSize;
} TPacketCGSyncPosition;

/* 채팅 (3) */
typedef struct command_chat	// 가변 패킷
{
	BYTE	header;
	WORD	size;
	BYTE	type;
} TPacketCGChat;

/* 귓속말 */
typedef struct command_whisper
{
	BYTE	bHeader;
	WORD	wSize;
	char 	szNameTo[CHARACTER_NAME_MAX_LEN + 1];
} TPacketCGWhisper;

typedef struct command_entergame
{
	BYTE	header;
} TPacketCGEnterGame;

typedef struct command_item_use
{
	BYTE 	header;
	TItemPos 	Cell;
	WORD wCount;
} TPacketCGItemUse;

typedef struct command_item_use_to_item
{
	BYTE	header;
	TItemPos	Cell;
	TItemPos	TargetCell;
} TPacketCGItemUseToItem;

#ifndef __ENABLE_DROP_DIALOG_EX__
typedef struct command_item_drop
{
	BYTE 	header;
	TItemPos 	Cell;
	DWORD	gold;
} TPacketCGItemDrop;

typedef struct command_item_drop2
{
	BYTE 	header;
	TItemPos 	Cell;
	DWORD	gold;
#ifdef ENABLE_NEW_MAX_COUNT
	WORD	count;
#else
	BYTE	count;
#endif
} TPacketCGItemDrop2;
#endif

typedef struct command_item_move
{
	BYTE 	header;
	TItemPos	Cell;
	TItemPos	CellTo;
#ifdef ENABLE_NEW_MAX_COUNT
	WORD	count;
#else
	BYTE	count;
#endif
} TPacketCGItemMove;

typedef struct command_item_pickup
{
	BYTE 	header;
	DWORD	vid;
} TPacketCGItemPickup;

#ifdef __ENABLE_NEW_PICKUP_SYSTEM__
typedef struct command_item_pickup_new
{
	BYTE 	header;
	DWORD	vid;
	DWORD	dwType;
} TPacketCGItemPickupNew;
#endif

typedef struct command_quickslot_add
{
	BYTE	header;
	UINT    pos;
	TQuickslot	slot;
} TPacketCGQuickslotAdd;

typedef struct command_quickslot_del
{
	BYTE	header;
	UINT    pos;
} TPacketCGQuickslotDel;

typedef struct command_quickslot_swap
{
	BYTE	header;
	UINT    pos;
	UINT	change_pos;
} TPacketCGQuickslotSwap;

enum
{
	SHOP_SUBHEADER_CG_END,
	SHOP_SUBHEADER_CG_BUY,
	SHOP_SUBHEADER_CG_SELL,
	SHOP_SUBHEADER_CG_SELL2,
};

typedef struct command_shop_buy
{
	BYTE	count;
} TPacketCGShopBuy;

typedef struct command_shop_sell
{
	BYTE	pos;
	BYTE	count;
} TPacketCGShopSell;

typedef struct command_shop
{
	BYTE	header;
#ifdef ENABLE_NEW_MAX_COUNT
	WORD	subheader;
#else
	BYTE	subheader;
#endif
} TPacketCGShop;

enum
{
	SHOP2_SUBHEADER_EMPTY,
	SHOP2_SUBHEADER_CG_BUY,
	SHOP2_SUBHEADER_CG_SEARCH
};

enum
{
	SHOP2_SEARCHER_TYPE_EMPTY,
	SHOP2_SEARCHER_TYPE_FIND,
	SHOP2_SEARCHER_TYPE_BUY,
	SHOP2_SEARCHER_TYPE_BUY_PREMIUM
};


typedef struct command_shop2
{
	BYTE        header; // Common Request +
#ifdef ENABLE_NEW_MAX_COUNT
	WORD		subheader; // Common Request 
#else
	BYTE		subheader; // Common Request -
#endif

	int			iVid; // Buy Request +
	BYTE		bItemPos;
	int			iBuyType; // Buy Request -

	int			iJob; // Search Request +
	int			iType;
	int			iSubtype;
	int			iMinLevel;
	int			iMaxLevel;
	int			iMinRefine;
	int			iMaxRefine;
	int			iMinPrice;
	int			iMaxPrice;
	int			iMinCheque;
	int			iMaxCheque;
	char		cItemNameForSearch[24 + 1]; // Search Request +
} TPacketCGShop2;
typedef struct command_on_click
{
	BYTE	header;
	DWORD	vid;
} TPacketCGOnClick;

enum
{
	EXCHANGE_SUBHEADER_CG_START,	/* arg1 == vid of target character */
	EXCHANGE_SUBHEADER_CG_ITEM_ADD,	/* arg1 == position of item */
	EXCHANGE_SUBHEADER_CG_ITEM_DEL,	/* arg1 == position of item */
	EXCHANGE_SUBHEADER_CG_ELK_ADD,	/* arg1 == amount of gold */
#ifdef __ENABLE_CHEQUE_SYSTEM__
	EXCHANGE_SUBHEADER_CG_CHEQUE_ADD,	/* arg1 == amount of cheque */
#endif
	EXCHANGE_SUBHEADER_CG_ACCEPT,	/* arg1 == not used */
	EXCHANGE_SUBHEADER_CG_CANCEL,	/* arg1 == not used */
};

typedef struct command_exchange
{
	BYTE	header;
	BYTE	sub_header;
	DWORD	arg1;
	BYTE	arg2;
	TItemPos	Pos;
} TPacketCGExchange;

typedef struct command_position
{
	BYTE	header;
	BYTE	position;
} TPacketCGPosition;

typedef struct command_script_answer
{
	BYTE	header;
	BYTE	answer;
	//char	file[32 + 1];
	//BYTE	answer[16 + 1];
} TPacketCGScriptAnswer;


typedef struct command_script_button
{
	BYTE        header;
	unsigned int	idx;
} TPacketCGScriptButton;

#ifdef __ENABLE_NEW_QUICK_SLOT_SYSTEM__
typedef struct command_newquickslot_add
{
	BYTE	header;
	BYTE	pos;
	TNewQuickslot	slot;
} TPacketCGNewQuickslotAdd;

typedef struct command_newquickslot_del
{
	BYTE	header;
	BYTE	pos;
} TPacketCGNewQuickslotDel;

typedef struct command_newquickslot_swap
{
	BYTE	header;
	BYTE	pos;
	BYTE	change_pos;
} TPacketCGNewQuickslotSwap;
#endif

typedef struct command_quest_input_string
{
	BYTE header;
	char msg[64+1];
} TPacketCGQuestInputString;

typedef struct command_quest_confirm
{
	BYTE header;
	BYTE answer;
	DWORD requestPID;
} TPacketCGQuestConfirm;

/*
 * 서버 측에서 보내는 패킷 
 */
typedef struct packet_quest_confirm
{
	BYTE header;
	char msg[64+1]; 
	long timeout;
	DWORD requestPID;
} TPacketGCQuestConfirm;

typedef struct packet_handshake
{
	BYTE	bHeader;
	DWORD	dwHandshake;
	DWORD	dwTime;
	long	lDelta;
} TPacketGCHandshake;

enum EPhase
{
	PHASE_CLOSE,
	PHASE_HANDSHAKE,
	PHASE_LOGIN,
	PHASE_SELECT,
	PHASE_LOADING,
	PHASE_GAME,
	PHASE_DEAD,

	PHASE_CLIENT_CONNECTING,
	PHASE_DBCLIENT,
	PHASE_P2P,
	PHASE_AUTH,
	PHASE_PASSPOD,
};

typedef struct packet_phase
{
	BYTE	header;
	BYTE	phase;
} TPacketGCPhase;

typedef struct packet_bindudp
{
	BYTE	header;
	DWORD	addr;
	WORD	port;
} TPacketGCBindUDP;

enum
{
	LOGIN_FAILURE_ALREADY	= 1,
	LOGIN_FAILURE_ID_NOT_EXIST	= 2,
	LOGIN_FAILURE_WRONG_PASS	= 3,
	LOGIN_FAILURE_FALSE		= 4,
	LOGIN_FAILURE_NOT_TESTOR	= 5,
	LOGIN_FAILURE_NOT_TEST_TIME	= 6,
	LOGIN_FAILURE_FULL		= 7
};

typedef struct packet_login_success
{
	BYTE		bHeader;
	TSimplePlayer	players[PLAYER_PER_ACCOUNT];
	DWORD		guild_id[PLAYER_PER_ACCOUNT];
	char		guild_name[PLAYER_PER_ACCOUNT][GUILD_NAME_MAX_LEN+1];

	DWORD		handle;
	DWORD		random_key;
} TPacketGCLoginSuccess;

typedef struct packet_auth_success
{
	BYTE	bHeader;
	DWORD	dwLoginKey;
	BYTE	bResult;
} TPacketGCAuthSuccess;

typedef struct packet_login_failure
{
	BYTE	header;
	char	szStatus[ACCOUNT_STATUS_MAX_LEN + 1];
} TPacketGCLoginFailure;

typedef struct packet_create_failure
{
	BYTE	header;
	BYTE	bType;
} TPacketGCCreateFailure;

enum
{
	ADD_CHARACTER_STATE_DEAD		= (1 << 0),
	ADD_CHARACTER_STATE_SPAWN		= (1 << 1),
	ADD_CHARACTER_STATE_GUNGON		= (1 << 2),
	ADD_CHARACTER_STATE_KILLER		= (1 << 3),
	ADD_CHARACTER_STATE_PARTY		= (1 << 4),
};

enum ECharacterEquipmentPart
{
	CHR_EQUIPPART_ARMOR,
	CHR_EQUIPPART_WEAPON,
	CHR_EQUIPPART_HEAD,
	CHR_EQUIPPART_HAIR,
#ifdef __SASH_SYSTEM__
	CHR_EQUIPPART_SASH,
#endif
#ifdef __QUIVER_SYSTEM__
	CHR_EQUIPPART_QUIVER,
#endif
	CHR_EQUIPPART_NUM,
};

typedef struct packet_add_char
{
	BYTE	header;
	DWORD	dwVID;
#if defined(__WJ_SHOW_MOB_INFO__)
	DWORD	dwLevel;
	DWORD	dwAIFlag;
#endif

	float	angle;
	long	x;
	long	y;
	long	z;

	int		bType;
	WORD	wRaceNum;
	BYTE	bMovingSpeed;
	BYTE	bAttackSpeed;

	BYTE	bStateFlag;
	DWORD	dwAffectFlag[2];	// 효과
} TPacketGCCharacterAdd;

typedef struct packet_char_additional_info
{
	BYTE    header;
	DWORD   dwVID;
	char    name[CHARACTER_NAME_MAX_LEN + 1];
	WORD    awPart[CHR_EQUIPPART_NUM];
	BYTE	bEmpire;
	DWORD   dwGuildID;
	DWORD   dwLevel;
	short	sAlignment;
#ifdef ENABLE_TITLE_SYSTEM
	short	sPrestige;
#endif
#ifdef ENABLE_REBIRTH
	short	sRebirth;
#endif
	BYTE	bPKMode;
	DWORD	dwMountVnum;
#ifdef CHANGE_SKILL_COLOR
	DWORD	dwSkillColor[ESkillColorLength::MAX_SKILL_COUNT][ESkillColorLength::MAX_EFFECT_COUNT];
#endif
#ifdef __ENABLE_SUPPORT_SHAMAN_SYSTEM__
	bool	bIsSupportShaman;
#endif
#ifdef __ENABLE_GUILD_LEADER_SYSTEM__
	BYTE	bMemberType;
#endif
#ifdef __ENABLE_WEAPON_RARITY_SYSTEM__
	DWORD	dwWeaponRareLv;
#endif
#ifdef __ENABLE_COSTUME_EVOLUTION__
	DWORD	dwCostumEvo;
#endif
} TPacketGCCharacterAdditionalInfo;

/*
   typedef struct packet_update_char_old
   {
   BYTE	header;
   DWORD	dwVID;

   WORD        awPart[CHR_EQUIPPART_NUM];
   BYTE	bMovingSpeed;
   BYTE	bAttackSpeed;

   BYTE	bStateFlag;
   DWORD	dwAffectFlag[2];

   DWORD	dwGuildID;
   short	sAlignment;
   BYTE	bPKMode;
   DWORD	dwMountVnum;
   } TPacketGCCharacterUpdateOld;
 */

typedef struct packet_update_char
{
	BYTE	header;
	DWORD	dwVID;

	WORD        awPart[CHR_EQUIPPART_NUM];
	BYTE	bMovingSpeed;
	BYTE	bAttackSpeed;

	BYTE	bStateFlag;
	DWORD	dwAffectFlag[2];

	DWORD	dwGuildID;
	short	sAlignment;
#ifdef ENABLE_TITLE_SYSTEM
	short	sPrestige;
#endif
#ifdef ENABLE_REBIRTH
	short	sRebirth;
#endif
	DWORD   dwLevel;
	BYTE	bPKMode;
	DWORD	dwMountVnum;
#ifdef CHANGE_SKILL_COLOR
	DWORD	dwSkillColor[ESkillColorLength::MAX_SKILL_COUNT][ESkillColorLength::MAX_EFFECT_COUNT];
#endif
#ifdef __ENABLE_SUPPORT_SHAMAN_SYSTEM__
	bool bIsSupportShaman;
#endif
#ifdef __ENABLE_GUILD_LEADER_SYSTEM__
	BYTE	bMemberType;
#endif
#ifdef __ENABLE_WEAPON_RARITY_SYSTEM__
	DWORD	dwWeaponRareLv;
#endif
#ifdef __ENABLE_COSTUME_EVOLUTION__
	DWORD	dwCostumEvo;
#endif
#ifdef __ENABLE_AUTO_HUNTING_SYSTEM__
	bool	bAutoHuntStatus;
#endif
} TPacketGCCharacterUpdate;

typedef struct packet_del_char
{
	BYTE	header;
	DWORD	id;
} TPacketGCCharacterDelete;

typedef struct packet_chat	// 가변 패킷
{
	BYTE	header;
	WORD	size;
	BYTE	type;
	DWORD	id;
	BYTE	bEmpire;
} TPacketGCChat;

typedef struct packet_whisper	// 가변 패킷
{
	BYTE	bHeader;
	WORD	wSize;
	BYTE	bType;
	char	szNameFrom[CHARACTER_NAME_MAX_LEN + 1];
	BYTE	bLevel;
} TPacketGCWhisper;

typedef struct packet_main_character
{
	BYTE        header;
	DWORD	dwVID;
	WORD	wRaceNum;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
	long	lx, ly, lz;
	BYTE	empire;
	BYTE	skill_group;
} TPacketGCMainCharacter;

// SUPPORT_BGM
typedef struct packet_main_character3_bgm
{
	enum
	{
		MUSIC_NAME_LEN = 24,
	};

	BYTE    header;
	DWORD	dwVID;
	WORD	wRaceNum;
	char	szChrName[CHARACTER_NAME_MAX_LEN + 1];
	char	szBGMName[MUSIC_NAME_LEN + 1];
	long	lx, ly, lz;
	BYTE	empire;
	BYTE	skill_group;
} TPacketGCMainCharacter3_BGM;

typedef struct packet_main_character4_bgm_vol
{
	enum
	{
		MUSIC_NAME_LEN = 24,
	};

	BYTE    header;
	DWORD	dwVID;
	WORD	wRaceNum;
	char	szChrName[CHARACTER_NAME_MAX_LEN + 1];
	char	szBGMName[MUSIC_NAME_LEN + 1];
	float	fBGMVol;
	long	lx, ly, lz;
	BYTE	empire;
	BYTE	skill_group;
} TPacketGCMainCharacter4_BGM_VOL;
// END_OF_SUPPORT_BGM

typedef struct packet_points
{
	BYTE	header;
	INT		points[POINT_MAX_NUM];
} TPacketGCPoints;

typedef struct packet_skill_level
{
	BYTE		bHeader;
	TPlayerSkill	skills[SKILL_MAX_NUM];
} TPacketGCSkillLevel;

typedef struct packet_point_change
{
	int		header;
	DWORD	dwVID;
	BYTE	type;
	long	amount;
	long	value;
} TPacketGCPointChange;

typedef struct packet_stun
{
	BYTE	header;
	DWORD	vid;
} TPacketGCStun;

typedef struct packet_dead
{
	BYTE	header;
	DWORD	vid;
} TPacketGCDead;

struct TPacketGCItemDelDeprecated
{
	BYTE	header;
	TItemPos Cell;
	DWORD	vnum;
#ifdef ENABLE_NEW_MAX_COUNT
	WORD	count;
#else
	BYTE	count;
#endif
#ifdef __ENABLE_CHANGELOOK_SYSTEM__
	DWORD	transmutation;
#endif
	long	alSockets[ITEM_SOCKET_MAX_NUM];
	TPlayerItemAttribute aAttr[ITEM_ATTRIBUTE_MAX_NUM];
};

typedef struct packet_item_set
{
	BYTE	header;
	TItemPos Cell;
	DWORD	vnum;
#ifdef ENABLE_NEW_MAX_COUNT
	WORD	count;
#else
	BYTE	count;
#endif
#ifdef __ENABLE_CHANGELOOK_SYSTEM__
	DWORD	transmutation;
#endif
	DWORD	flags;
	DWORD	anti_flags;
	bool	highlight;
	long	alSockets[ITEM_SOCKET_MAX_NUM];
	TPlayerItemAttribute aAttr[ITEM_ATTRIBUTE_MAX_NUM];
#ifdef __ENABLE_SOULBIND_SYSTEM__
	long	sealbind;
#endif
	bool	is_basic;
#ifdef ENABLE_RENTITEM_SYSTEM
	DWORD	renttime;
#endif
} TPacketGCItemSet;

typedef struct packet_item_del
{
	BYTE	header;
	UINT	pos;
} TPacketGCItemDel;

struct packet_item_use
{
	BYTE	header;
	TItemPos Cell;
	DWORD	ch_vid;
	DWORD	victim_vid;
	DWORD	vnum;
};

struct packet_item_move
{
	BYTE	header;
	TItemPos Cell;
	TItemPos CellTo;
};

typedef struct packet_item_update
{
	BYTE	header;
	TItemPos Cell;
#ifdef ENABLE_NEW_MAX_COUNT
	WORD	count;
#else
	BYTE	count;
#endif
#ifdef __ENABLE_CHANGELOOK_SYSTEM__
	DWORD	transmutation;
#endif
	long	alSockets[ITEM_SOCKET_MAX_NUM];
	TPlayerItemAttribute aAttr[ITEM_ATTRIBUTE_MAX_NUM];
#ifdef __ENABLE_SOULBIND_SYSTEM__
	long	sealbind;
#endif
	bool	is_basic;
#ifdef ENABLE_RENTITEM_SYSTEM
	DWORD	renttime;
#endif
} TPacketGCItemUpdate;

typedef struct packet_item_ground_add
{
	BYTE	bHeader;
	long 	x, y, z;
	DWORD	dwVID;
	DWORD	dwVnum;
	long	alSockets[ITEM_SOCKET_MAX_NUM];
	DWORD	count;
} TPacketGCItemGroundAdd;

typedef struct packet_item_ownership
{
	BYTE	bHeader;
	DWORD	dwVID;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
} TPacketGCItemOwnership;

typedef struct packet_item_ground_del
{
	BYTE	bHeader;
	DWORD	dwVID;
} TPacketGCItemGroundDel;

struct packet_quickslot_add
{
	BYTE	header;
	UINT	pos;
	TQuickslot	slot;
};

struct packet_quickslot_del
{
	BYTE	header;
	UINT	pos;
};

struct packet_quickslot_swap
{
	BYTE	header;
	UINT	pos;
	UINT	pos_to;
};

struct packet_motion
{
	BYTE	header;
	DWORD	vid;
	DWORD	victim_vid;
	WORD	motion;
};

#ifdef __ENABLE_NEW_QUICK_SLOT_SYSTEM__
struct packet_newquickslot_add
{
	BYTE	header;
	BYTE	pos;
	TNewQuickslot	slot;
};

struct packet_newquickslot_del
{
	BYTE	header;
	BYTE	pos;
};

struct packet_newquickslot_swap
{
	BYTE	header;
	BYTE	pos;
	BYTE	pos_to;
};
#endif

enum EPacketShopSubHeaders
{
	SHOP_SUBHEADER_GC_START,
	SHOP_SUBHEADER_GC_END,
	SHOP_SUBHEADER_GC_UPDATE_ITEM,
	SHOP_SUBHEADER_GC_UPDATE_PRICE,
	SHOP_SUBHEADER_GC_OK,
	SHOP_SUBHEADER_GC_NOT_ENOUGH_MONEY,
	SHOP_SUBHEADER_GC_SOLDOUT,
	SHOP_SUBHEADER_GC_INVENTORY_FULL,
	SHOP_SUBHEADER_GC_INVALID_POS,
	SHOP_SUBHEADER_GC_SOLD_OUT,
	SHOP_SUBHEADER_GC_START_EX,
	SHOP_SUBHEADER_GC_NOT_ENOUGH_MONEY_EX,
#ifdef __ENABLE_EVENT_SYSTEM__
	SHOP_SUBHEADER_GC_NOT_ENOUGH_YEAR_ROUND_COIN,
#endif
	SHOP_SUBHEADER_GC_NOT_ENOUGH_CHEQUE,
	SHOP_SUBHEADER_GC_NOT_ENOUGH_GAYA_POINT,
	SHOP_SUBHEADER_GC_NOT_ENOUGH_ACHIEVEMENT_POINT,
	SHOP_SUBHEADER_GC_NOT_ENOUGH_EXP,
#ifdef ENABLE_2TH_SHOPEX_SYSTEM
	SHOP_SUBHEADER_GC_NOT_ENOUGH_DRAGON_COIN,
	SHOP_SUBHEADER_GC_NOT_ENOUGH_DRAGON_MARK,
	SHOP_SUBHEADER_GC_NOT_ENOUGH_ALIGNMENT,
#endif
#ifdef ENABLE_MULTISHOP
	SHOP_SUBHEADER_GC_NOT_ENOUGH_ITEM,
#endif
};

struct packet_shop_item
{
	DWORD		vnum;
	DWORD		price;
#ifdef __ENABLE_CHEQUE_SYSTEM__
	DWORD		price_cheque;
#endif
#ifdef ENABLE_NEW_MAX_COUNT
	WORD		count;
#else
	BYTE		count;
#endif
#ifdef ENABLE_MULTISHOP
	DWORD		wPriceVnum;
#endif
#ifdef __ENABLE_CHANGELOOK_SYSTEM__
	DWORD	transmutation;
#endif
	BYTE		display_pos;
	long	alSockets[ITEM_SOCKET_MAX_NUM];
	TPlayerItemAttribute aAttr[ITEM_ATTRIBUTE_MAX_NUM];
#ifdef ENABLE_2TH_SHOPEX_SYSTEM
	DWORD		iLimitValue;
#endif
};

typedef struct packet_shop_start
{
	DWORD   owner_vid;
#ifdef ENABLE_SHOP_SEEN
	DWORD   looked;
#endif
	struct packet_shop_item	items[SHOP_HOST_ITEM_MAX_NUM];
#ifdef ENABLE_2TH_SHOPEX_SYSTEM
	char shop_name[SHOP_TAB_NAME_MAX];
	short price_type;
#endif
} TPacketGCShopStart;

typedef struct packet_shop_start_ex // 다음에 TSubPacketShopTab* shop_tabs 이 따라옴.
{
	typedef struct sub_packet_shop_tab 
	{
		char name[SHOP_TAB_NAME_MAX];
		BYTE coin_type;
		packet_shop_item items[SHOP_HOST_ITEM_MAX_NUM];
	} TSubPacketShopTab;
	DWORD owner_vid;
	BYTE shop_tab_count;
} TPacketGCShopStartEx;

typedef struct packet_shop_update_item
{
	BYTE			pos;
	struct packet_shop_item	item;
} TPacketGCShopUpdateItem;

typedef struct packet_shop_update_price
{
	BYTE			bPos;
	int				iPrice;
} TPacketGCShopUpdatePrice;

typedef struct packet_shop	// 가변 패킷
{
	BYTE		header;
	WORD	size; 
	BYTE		subheader;
} TPacketGCShop;

struct packet_exchange
{
	BYTE	header;
	BYTE	sub_header;
	BYTE	is_me;
	DWORD	arg1;	// vnum
	TItemPos	arg2;	// cell
	DWORD	arg3;	// count
#ifdef __ENABLE_TRADABLE_ICON__
	TItemPos	arg4;	// srccell
#endif
	long	alSockets[ITEM_SOCKET_MAX_NUM];
	TPlayerItemAttribute aAttr[ITEM_ATTRIBUTE_MAX_NUM];
#ifdef __ENABLE_CHANGELOOK_SYSTEM__
	DWORD	dwTransmutation;
#endif
};

enum EPacketTradeSubHeaders
{
	EXCHANGE_SUBHEADER_GC_START,	/* arg1 == vid */
	EXCHANGE_SUBHEADER_GC_ITEM_ADD,	/* arg1 == vnum  arg2 == pos  arg3 == count */
	EXCHANGE_SUBHEADER_GC_ITEM_DEL,
	EXCHANGE_SUBHEADER_GC_GOLD_ADD,	/* arg1 == gold */
#ifdef __ENABLE_CHEQUE_SYSTEM__
	EXCHANGE_SUBHEADER_GC_CHEQUE_ADD,	/* arg1 == cheque */
#endif
	EXCHANGE_SUBHEADER_GC_ACCEPT,	/* arg1 == accept */
	EXCHANGE_SUBHEADER_GC_END,		/* arg1 == not used */
	EXCHANGE_SUBHEADER_GC_ALREADY,	/* arg1 == not used */
	EXCHANGE_SUBHEADER_GC_LESS_GOLD,	/* arg1 == not used */
#ifdef __ENABLE_CHEQUE_SYSTEM__
	EXCHANGE_SUBHEADER_GC_LESS_CHEQUE,	/* arg1 == not used */
#endif
};

struct packet_position
{
	BYTE	header;
	DWORD	vid;
	BYTE	position;
};

typedef struct packet_ping
{
	BYTE	header;
} TPacketGCPing;

struct packet_script
{
	BYTE	header;
	WORD	size;
	BYTE	skin;
	WORD	src_size;
};

typedef struct packet_change_speed
{
	BYTE		header;
	DWORD		vid;
	WORD		moving_speed;
} TPacketGCChangeSpeed;

struct packet_mount
{
	BYTE	header;
	DWORD	vid;
	DWORD	mount_vid;
	BYTE	pos;
	DWORD	x, y;
};

typedef struct packet_move
{	
	BYTE		bHeader;
	BYTE		bFunc;
	BYTE		bArg;
	BYTE		bRot;
	DWORD		dwVID;
	long		lX;
	long		lY;
	DWORD		dwTime;
	DWORD		dwDuration;
} TPacketGCMove;

// 소유권
typedef struct packet_ownership
{
	BYTE		bHeader;
	DWORD		dwOwnerVID;
	DWORD		dwVictimVID;
} TPacketGCOwnership;

// 위치 동기화 패킷의 bCount 만큼 붙는 단위
typedef struct packet_sync_position_element
{
	DWORD	dwVID;
	long	lX;
	long	lY;
} TPacketGCSyncPositionElement;

// 위치 동기화
typedef struct packet_sync_position	// 가변 패킷
{
	BYTE	bHeader;
	WORD	wSize;	// 개수 = (wSize - sizeof(TPacketGCSyncPosition)) / sizeof(TPacketGCSyncPositionElement) 
} TPacketGCSyncPosition;

typedef struct packet_fly
{
	BYTE	bHeader;
	BYTE	bType;
	DWORD	dwStartVID;
	DWORD	dwEndVID;
} TPacketGCCreateFly;

typedef struct command_fly_targeting
{
	BYTE		bHeader;
	DWORD		dwTargetVID;
	long		x, y;
} TPacketCGFlyTargeting;

typedef struct packet_fly_targeting
{
	BYTE		bHeader;
	DWORD		dwShooterVID;
	DWORD		dwTargetVID;
	long		x, y;
} TPacketGCFlyTargeting;

typedef struct packet_shoot
{
	BYTE		bHeader;
	BYTE		bType;
} TPacketCGShoot;

typedef struct packet_duel_start
{
	BYTE	header;
	WORD	wSize;	// DWORD가 몇개? 개수 = (wSize - sizeof(TPacketGCPVPList)) / 4
} TPacketGCDuelStart;

enum EPVPModes
{
	PVP_MODE_NONE,
	PVP_MODE_AGREE,
	PVP_MODE_FIGHT,
	PVP_MODE_REVENGE
};

typedef struct packet_pvp
{
	BYTE        bHeader;
	DWORD       dwVIDSrc;
	DWORD       dwVIDDst;
	BYTE        bMode;	// 0 이면 끔, 1이면 켬
} TPacketGCPVP;

typedef struct command_use_skill
{
	BYTE	bHeader;
	DWORD	dwVnum;
	DWORD	dwVID;
} TPacketCGUseSkill;

typedef struct command_target
{
	BYTE	header;
	DWORD	dwVID;
} TPacketCGTarget;

typedef struct packet_target
{
	BYTE	header;
	DWORD	dwVID;
	DWORD	bHPPercent;
#ifdef __VIEW_TARGET_DECIMAL_HP__
	int		iMinHP;
	int		iMaxHP;
#endif
#ifdef __ENABLE_TARGET_ELEMENT_SYSTEM__
	BYTE	bElement;
#endif
} TPacketGCTarget;

#ifdef __SEND_TARGET_INFO__
typedef struct packet_target_info
{
	BYTE	header;
	DWORD	dwVID;
	DWORD	race;
	DWORD	dwVnum;
	BYTE	count;
} TPacketGCTargetInfo;

typedef struct packet_target_info_load
{
	BYTE header;
	DWORD dwVID;
} TPacketCGTargetInfoLoad;
#endif

typedef struct packet_warp
{
	BYTE	bHeader;
	long	lX;
	long	lY;
	long	lAddr;
	WORD	wPort;
} TPacketGCWarp;

typedef struct command_warp
{
	BYTE	bHeader;
} TPacketCGWarp;

struct packet_quest_info
{
	BYTE header;
	WORD size;
	WORD index;
	WORD c_index;
	BYTE flag;
};

enum 
{
	MESSENGER_SUBHEADER_GC_LIST,
	MESSENGER_SUBHEADER_GC_LOGIN,
	MESSENGER_SUBHEADER_GC_LOGOUT,
	MESSENGER_SUBHEADER_GC_INVITE,
	MESSENGER_SUBHEADER_GC_MOBILE,
	MESSENGER_SUBHEADER_GC_REMOVE_FRIEND,
};

typedef struct packet_messenger
{
	BYTE header;
	WORD size;
	BYTE subheader;
} TPacketGCMessenger;

typedef struct packet_messenger_guild_list
{
	BYTE connected;
	BYTE length;
	//char login[LOGIN_MAX_LEN+1];
} TPacketGCMessengerGuildList;

typedef struct packet_messenger_guild_login
{
	BYTE length;
	//char login[LOGIN_MAX_LEN+1];
} TPacketGCMessengerGuildLogin;

typedef struct packet_messenger_guild_logout
{
	BYTE length;

	//char login[LOGIN_MAX_LEN+1];
} TPacketGCMessengerGuildLogout;

typedef struct packet_messenger_list_offline
{
	BYTE connected; // always 0
	BYTE length;
} TPacketGCMessengerListOffline;

typedef struct packet_messenger_list_online
{
	BYTE connected; // always 1
	BYTE length;
} TPacketGCMessengerListOnline;

enum 
{
	MESSENGER_SUBHEADER_CG_ADD_BY_VID,
	MESSENGER_SUBHEADER_CG_ADD_BY_NAME,
	MESSENGER_SUBHEADER_CG_REMOVE,
	MESSENGER_SUBHEADER_CG_INVITE_ANSWER,
};

typedef struct command_messenger
{
	BYTE header;
	BYTE subheader;
} TPacketCGMessenger;

typedef struct command_messenger_add_by_vid
{
	DWORD vid;
} TPacketCGMessengerAddByVID;

typedef struct command_messenger_add_by_name
{
	BYTE length;
	//char login[LOGIN_MAX_LEN+1];
} TPacketCGMessengerAddByName;

typedef struct command_messenger_remove
{
	char login[LOGIN_MAX_LEN+1];
	//DWORD account;
} TPacketCGMessengerRemove;

typedef struct command_safebox_checkout
{
	BYTE	bHeader;
	UINT	bSafePos;
	TItemPos	ItemPos;
} TPacketCGSafeboxCheckout;

typedef struct command_safebox_checkin
{
	BYTE	bHeader;
	UINT	bSafePos;
	TItemPos	ItemPos;
} TPacketCGSafeboxCheckin;

#ifdef ENABLE_BLOOD_DUNGEON_SYSTEM
typedef struct packet_blood_dungeon
{
	BYTE	header;
	DWORD	OneGuildID;
	float 	OneGuildDamage;
	short 	OneGuildMember;
	DWORD	TwoGuildID;
	float 	TwoGuildDamage;
	short 	TwoGuildMember;
	DWORD	ThereeGuildID;
	float 	ThereeGuildDamage;
	short 	ThereeGuildMember;
	DWORD	FourGuildID;
	float 	FourGuildDamage;
	short 	FourGuildMember;
	DWORD	FiveGuildID;
	float 	FiveGuildDamage;
	short 	FiveGuildMember;
} TPacketGCBloodDungeon;
#endif

#ifdef ENABLE_BOSS_TRACKING
typedef struct packet_boss_tracking
{
	BYTE	header;
	DWORD	dead_time;
	DWORD	regen_time;
	BYTE	channel;
	DWORD	mob_vnum;
	DWORD	map_index;
} TPacketGCBossTracking;

typedef struct packet_p2p_boss_tracking
{
	BYTE	header;
	DWORD	dead_time;
	DWORD	regen_time;
	BYTE	channel;
	DWORD	mob_vnum;
	DWORD	map_index;
} TPacketGGBossTracking;
#endif

///////////////////////////////////////////////////////////////////////////////////
// Party

typedef struct command_party_parameter
{
	BYTE	bHeader;
	BYTE	bDistributeMode;
} TPacketCGPartyParameter;

typedef struct paryt_parameter
{
	BYTE	bHeader;
	BYTE	bDistributeMode;
} TPacketGCPartyParameter;

typedef struct packet_party_add
{
	BYTE	header;
	DWORD	pid;
	char	name[CHARACTER_NAME_MAX_LEN+1];
#ifdef __OFFICIAL_GF_PARTY_UPDATE__
	long	mapIdx;
	long	channel;
	
	packet_party_add() {
		mapIdx = 0;
		channel = 0;
	}
#endif
} TPacketGCPartyAdd;

typedef struct command_party_invite
{
	BYTE	header;
	DWORD	vid;
} TPacketCGPartyInvite;

typedef struct packet_party_invite
{
	BYTE	header;
	DWORD	leader_vid;
} TPacketGCPartyInvite;

typedef struct command_party_invite_answer
{
	BYTE	header;
	DWORD	leader_vid;
	BYTE	accept;
} TPacketCGPartyInviteAnswer;

typedef struct packet_party_update
{
	BYTE	header;
	DWORD	pid;
	BYTE	role;
	BYTE	percent_hp;
	short	affects[7];
} TPacketGCPartyUpdate;

typedef struct packet_party_remove
{
	BYTE header;
	DWORD pid;
} TPacketGCPartyRemove;

typedef struct packet_party_link
{
	BYTE header;
	DWORD pid;
	DWORD vid;
#ifdef __OFFICIAL_GF_PARTY_UPDATE__
	long mapIdx;
	long channel;
	
	packet_party_link() {
		mapIdx = 0;
		channel = 0;
	}
#endif
} TPacketGCPartyLink;

typedef struct packet_party_unlink
{
	BYTE header;
	DWORD pid;
	DWORD vid;
} TPacketGCPartyUnlink;

typedef struct command_party_remove
{
	BYTE header;
	DWORD pid;
} TPacketCGPartyRemove;

typedef struct command_party_set_state
{
	BYTE header;
	DWORD pid;
	BYTE byRole;
	BYTE flag;
} TPacketCGPartySetState;

enum 
{
	PARTY_SKILL_HEAL = 1,
	PARTY_SKILL_WARP = 2
};

typedef struct command_party_use_skill
{
	BYTE header;
	BYTE bySkillIndex;
	DWORD vid;
} TPacketCGPartyUseSkill;

typedef struct packet_safebox_size
{
	BYTE bHeader;
	BYTE bSize;
} TPacketCGSafeboxSize;

typedef struct packet_safebox_wrong_password
{
	BYTE	bHeader;
} TPacketCGSafeboxWrongPassword;

typedef struct command_empire
{
	BYTE	bHeader;
	BYTE	bEmpire;
} TPacketCGEmpire;

typedef struct packet_empire
{
	BYTE	bHeader;
	BYTE	bEmpire;
} TPacketGCEmpire;

enum
{
	SAFEBOX_MONEY_STATE_SAVE,
	SAFEBOX_MONEY_STATE_WITHDRAW,
};

typedef struct command_safebox_money
{
	BYTE        bHeader;
	BYTE        bState;
	long	lMoney;
} TPacketCGSafeboxMoney;

typedef struct packet_safebox_money_change
{
	BYTE	bHeader;
	long	lMoney;
} TPacketGCSafeboxMoneyChange;

// Guild

enum
{
	GUILD_SUBHEADER_GC_LOGIN,
	GUILD_SUBHEADER_GC_LOGOUT,
	GUILD_SUBHEADER_GC_LIST,
	GUILD_SUBHEADER_GC_GRADE,
	GUILD_SUBHEADER_GC_ADD,
	GUILD_SUBHEADER_GC_REMOVE,
	GUILD_SUBHEADER_GC_GRADE_NAME,
	GUILD_SUBHEADER_GC_GRADE_AUTH,
	GUILD_SUBHEADER_GC_INFO,
	GUILD_SUBHEADER_GC_COMMENTS,
	GUILD_SUBHEADER_GC_CHANGE_EXP,
	GUILD_SUBHEADER_GC_CHANGE_MEMBER_GRADE,
	GUILD_SUBHEADER_GC_SKILL_INFO,
	GUILD_SUBHEADER_GC_CHANGE_MEMBER_GENERAL,
	GUILD_SUBHEADER_GC_GUILD_INVITE,
	GUILD_SUBHEADER_GC_WAR,
	GUILD_SUBHEADER_GC_GUILD_NAME,
	GUILD_SUBHEADER_GC_GUILD_WAR_LIST,
	GUILD_SUBHEADER_GC_GUILD_WAR_END_LIST,
	GUILD_SUBHEADER_GC_WAR_SCORE,
	GUILD_SUBHEADER_GC_MONEY_CHANGE,
};

enum GUILD_SUBHEADER_CG
{
	GUILD_SUBHEADER_CG_ADD_MEMBER,
	GUILD_SUBHEADER_CG_REMOVE_MEMBER,
	GUILD_SUBHEADER_CG_CHANGE_GRADE_NAME,
	GUILD_SUBHEADER_CG_CHANGE_GRADE_AUTHORITY,
	GUILD_SUBHEADER_CG_OFFER,
	GUILD_SUBHEADER_CG_POST_COMMENT,
	GUILD_SUBHEADER_CG_DELETE_COMMENT,    
	GUILD_SUBHEADER_CG_REFRESH_COMMENT,
	GUILD_SUBHEADER_CG_CHANGE_MEMBER_GRADE,
	GUILD_SUBHEADER_CG_USE_SKILL,
	GUILD_SUBHEADER_CG_CHANGE_MEMBER_GENERAL,
	GUILD_SUBHEADER_CG_GUILD_INVITE_ANSWER,
	GUILD_SUBHEADER_CG_CHARGE_GSP,
	GUILD_SUBHEADER_CG_DEPOSIT_MONEY,
	GUILD_SUBHEADER_CG_WITHDRAW_MONEY,
};

typedef struct packet_guild
{
	BYTE header;
	WORD size;
	BYTE subheader;
} TPacketGCGuild;

typedef struct packet_guild_name_t
{
	BYTE header;
	WORD size;
	BYTE subheader;
	DWORD	guildID;
	char	guildName[GUILD_NAME_MAX_LEN];
} TPacketGCGuildName;

typedef struct packet_guild_war
{
	DWORD	dwGuildSelf;
	DWORD	dwGuildOpp;
	BYTE	bType;
	BYTE 	bWarState;
} TPacketGCGuildWar;

typedef struct command_guild
{
	BYTE header;
	BYTE subheader;
} TPacketCGGuild;

typedef struct command_guild_answer_make_guild
{
	BYTE header;
	char guild_name[GUILD_NAME_MAX_LEN+1];
} TPacketCGAnswerMakeGuild;

typedef struct command_guild_use_skill
{
	DWORD	dwVnum;
	DWORD	dwPID;
} TPacketCGGuildUseSkill;

// Guild Mark
typedef struct command_mark_login
{
	BYTE    header;
	DWORD   handle;
	DWORD   random_key;
} TPacketCGMarkLogin;

typedef struct command_mark_upload
{
	BYTE	header;
	DWORD	gid;
	BYTE	image[16*12*4];
} TPacketCGMarkUpload;

typedef struct command_mark_idxlist
{
	BYTE	header;
} TPacketCGMarkIDXList;

typedef struct command_mark_crclist
{
	BYTE	header;
	BYTE	imgIdx;
	DWORD	crclist[80];
} TPacketCGMarkCRCList;

typedef struct packet_mark_idxlist
{
	BYTE    header;
	DWORD	bufSize;
	WORD	count;
	//뒤에 size * (WORD + WORD)만큼 데이터 붙음
} TPacketGCMarkIDXList;

typedef struct packet_mark_block
{
	BYTE	header;
	DWORD	bufSize;
	BYTE	imgIdx;
	DWORD	count;
	// 뒤에 64 x 48 x 픽셀크기(4바이트) = 12288만큼 데이터 붙음
} TPacketGCMarkBlock;

typedef struct command_symbol_upload
{
	BYTE	header;
	WORD	size;
	DWORD	guild_id;
} TPacketCGGuildSymbolUpload;

typedef struct command_symbol_crc
{
	BYTE header;
	DWORD guild_id;
	DWORD crc;
	DWORD size;
} TPacketCGSymbolCRC;

typedef struct packet_symbol_data
{
	BYTE header;
	WORD size;
	DWORD guild_id;
} TPacketGCGuildSymbolData;

// Fishing

typedef struct command_fishing
{
	BYTE header;
	BYTE dir;
} TPacketCGFishing;

typedef struct packet_fishing
{
	BYTE header;
	BYTE subheader;
	DWORD info;
	BYTE dir;
} TPacketGCFishing;

enum
{
	FISHING_SUBHEADER_GC_START,
	FISHING_SUBHEADER_GC_STOP,
	FISHING_SUBHEADER_GC_REACT,
	FISHING_SUBHEADER_GC_SUCCESS,
	FISHING_SUBHEADER_GC_FAIL,
	FISHING_SUBHEADER_GC_FISH,
};

typedef struct command_give_item
{
	BYTE byHeader;
	DWORD dwTargetVID;
	TItemPos ItemPos;
#ifdef ENABLE_NEW_MAX_COUNT
	WORD	byItemCount;
#else
	BYTE	byItemCount;
#endif
} TPacketCGGiveItem;

typedef struct SPacketCGHack
{
	BYTE	bHeader;
	char	szBuf[255 + 1];
} TPacketCGHack;

// SubHeader - Dungeon
enum
{
	DUNGEON_SUBHEADER_GC_TIME_ATTACK_START = 0,
	DUNGEON_SUBHEADER_GC_DESTINATION_POSITION = 1,
};

typedef struct packet_dungeon
{
	BYTE bHeader;
	WORD size;
	BYTE subheader;
} TPacketGCDungeon;

typedef struct packet_dungeon_dest_position
{
	long x;
	long y;
} TPacketGCDungeonDestPosition;

typedef struct SPacketGCShopSign
{
	BYTE	bHeader;
	DWORD	dwVID;
	#ifdef __ENABLE_SHOP_DECORATION_SYSTEM__
	BYTE	bShopKasmirTitle;
	#endif
	char	szSign[SHOP_SIGN_MAX_LEN + 1];
} TPacketGCShopSign;

typedef struct SPacketCGMyShop
{
	BYTE	bHeader;
	char	szSign[SHOP_SIGN_MAX_LEN + 1];
#ifdef ENABLE_NEW_MAX_COUNT
	WORD	bCount;	// count of TShopItemTable, max 1000
#else
	int		bCount;	// count of TShopItemTable, max 200
#endif
	#ifdef OFFLINE_SHOP
	BYTE	days;
	#endif
	#ifdef __ENABLE_SHOP_DECORATION_SYSTEM__
	DWORD	dwKasmirNpc;
	BYTE	bKasmirBaslik;
	#endif
} TPacketCGMyShop;

typedef struct SPacketGCTime
{
	BYTE	bHeader;
	time_t	time;
} TPacketGCTime;

enum
{
	WALKMODE_RUN,
	WALKMODE_WALK,
};

typedef struct SPacketGCWalkMode
{
	BYTE	header;
	DWORD	vid;
	BYTE	mode;
} TPacketGCWalkMode;

typedef struct SPacketGCChangeSkillGroup
{
	BYTE        header;
	BYTE        skill_group;
} TPacketGCChangeSkillGroup;

typedef struct SPacketCGRefine
{
	BYTE	header;
	UINT	pos;
	BYTE	type;
	BYTE	lLow;
	BYTE	lMedium;
	BYTE	lExtra;
	BYTE	lTotal;
} TPacketCGRefine;

typedef struct SPacketCGRequestRefineInfo
{
	BYTE	header;
	UINT	pos;
} TPacketCGRequestRefineInfo;

typedef struct SPacketGCRefineInformaion
{
	BYTE	header;
	BYTE	type;
	UINT	pos;
	DWORD	src_vnum;
	DWORD	result_vnum;
#ifdef ENABLE_NEW_MAX_COUNT
	WORD	material_count;
#else
	BYTE	material_count;
#endif
	int		cost; // 소요 비용
	int		prob; // 확률
	TRefineMaterial materials[REFINE_MATERIAL_MAX_NUM];
} TPacketGCRefineInformation;

struct TNPCPosition
{
	BYTE bType;
	char name[CHARACTER_NAME_MAX_LEN+1];
	long x;
	long y;
};

typedef struct SPacketGCNPCPosition
{
	BYTE header;
	WORD size;
	WORD count;

	// array of TNPCPosition
} TPacketGCNPCPosition;

typedef struct SPacketGCSpecialEffect
{
	BYTE header;
	BYTE type;
	DWORD vid;
} TPacketGCSpecialEffect;

typedef struct SPacketCGChangeName
{
	BYTE header;
	BYTE index;
	char name[CHARACTER_NAME_MAX_LEN+1];
} TPacketCGChangeName;

typedef struct SPacketGCChangeName
{
	BYTE header;
	DWORD pid;
	char name[CHARACTER_NAME_MAX_LEN+1];
} TPacketGCChangeName;


typedef struct command_client_version
{
	BYTE header;
	char filename[32+1];
	char timestamp[32+1];
} TPacketCGClientVersion;

typedef struct command_client_version2
{
	BYTE header;
	char filename[32+1];
	char timestamp[32+1];
} TPacketCGClientVersion2;

typedef struct packet_channel
{
	BYTE header;
	BYTE channel;
} TPacketGCChannel;

#ifdef __ENABLE_VIEW_EQUIPMENT_SYSTEM__
typedef struct pakcet_view_equip
{
	BYTE  header;
	DWORD vid;
	struct {
		DWORD	vnum;
#ifdef ENABLE_NEW_MAX_COUNT
		WORD	count;
#else
		BYTE    count;
#endif
		long	alSockets[ITEM_SOCKET_MAX_NUM];
		TPlayerItemAttribute aAttr[ITEM_ATTRIBUTE_MAX_NUM];
		long	sealbind;
		DWORD	transmutation;
	} equips[22];
} TPacketViewEquip;
#endif

typedef struct 
{
	DWORD	dwID;
	long	x, y;
	long	width, height;
	DWORD	dwGuildID;
} TLandPacketElement;

typedef struct packet_land_list
{
	BYTE	header;
	WORD	size;
} TPacketGCLandList;

typedef struct
{
	BYTE	bHeader;
	long	lID;
	char	szName[32+1];
	DWORD	dwVID;
	BYTE	bType;
} TPacketGCTargetCreate;

typedef struct
{
	BYTE	bHeader;
	long	lID;
	long	lX, lY;
} TPacketGCTargetUpdate;

typedef struct
{
	BYTE	bHeader;
	long	lID;
} TPacketGCTargetDelete;

typedef struct
{
	BYTE		bHeader;
	TPacketAffectElement elem;
} TPacketGCAffectAdd;

typedef struct
{
	BYTE	bHeader;
	DWORD	dwType;
	BYTE	bApplyOn;
} TPacketGCAffectRemove;

typedef struct packet_lover_info
{
	BYTE header;
	char name[CHARACTER_NAME_MAX_LEN + 1];
	BYTE love_point;
} TPacketGCLoverInfo;

typedef struct packet_love_point_update
{
	BYTE header;
	BYTE love_point;
} TPacketGCLovePointUpdate;

// MINING
typedef struct packet_dig_motion
{
	BYTE header;
	DWORD vid;
	DWORD target_vid;
	BYTE count;
} TPacketGCDigMotion;
// END_OF_MINING

// SCRIPT_SELECT_ITEM
typedef struct command_script_select_item
{
	BYTE header;
	DWORD selection;
} TPacketCGScriptSelectItem;
// END_OF_SCRIPT_SELECT_ITEM

typedef struct packet_damage_info
{
	BYTE header;
	DWORD dwVID;
	BYTE flag;
	int damage;
} TPacketGCDamageInfo;

typedef struct tag_GGSiege
{
	BYTE	bHeader;
	BYTE	bEmpire;
	BYTE	bTowerCount;
} TPacketGGSiege;

typedef struct SPacketGGMonarchTransfer
{
	BYTE	bHeader;
	DWORD	dwTargetPID;
	long	x;
	long	y;
} TPacketMonarchGGTransfer;

typedef struct SPacketGGPCBangUpdate
{
	BYTE bHeader;
	unsigned long ulPCBangID;
} TPacketPCBangUpdate;

typedef struct SPacketGGCheckAwakeness
{
	BYTE bHeader;
} TPacketGGCheckAwakeness;

//TODO :  아우 짱나..가변패킷 사이즈 받아들일수 있게 패킷 핸들러 Refactoring 하자. 
typedef struct SPacketGCHybridCryptKeys
{
	SPacketGCHybridCryptKeys() : m_pStream(NULL) {}
	~SPacketGCHybridCryptKeys()
	{
		//GCC 에선 NULL delete 해도 괜찮나? 일단 안전하게 NULL 체크 하자. ( 근데 이거 C++ 표준아니었나 --a )
		if( m_pStream )
		{
			delete[] m_pStream;
			m_pStream = NULL;
		}
	}
	
	DWORD GetStreamSize()
	{
		return sizeof(bHeader) + sizeof(WORD) + sizeof(int) + KeyStreamLen; 
	}

	BYTE* GetStreamData()
	{
		if( m_pStream )
			delete[] m_pStream;

		uDynamicPacketSize = (WORD)GetStreamSize();
		
		m_pStream = new BYTE[ uDynamicPacketSize ];

		memcpy( m_pStream, &bHeader, 1 );
		memcpy( m_pStream+1, &uDynamicPacketSize, 2 );
		memcpy( m_pStream+3, &KeyStreamLen, 4 );

		if( KeyStreamLen > 0 )
			memcpy( m_pStream+7, pDataKeyStream, KeyStreamLen );

		return m_pStream;
	}

	BYTE	bHeader;
	WORD    uDynamicPacketSize; // 빌어먹을 클라  DynamicPacketHeader 구조때문에 맞춰줘야한다 -_-;
	int		KeyStreamLen;
	BYTE*   pDataKeyStream;

private:
	BYTE* m_pStream;


} TPacketGCHybridCryptKeys;


typedef struct SPacketGCPackageSDB
{
	SPacketGCPackageSDB() : m_pDataSDBStream(NULL), m_pStream(NULL) {}
	~SPacketGCPackageSDB()
	{
		if( m_pStream )
		{
			delete[] m_pStream;
			m_pStream = NULL;
		}
	}
	
	DWORD GetStreamSize()
	{
		return sizeof(bHeader) + sizeof(WORD) + sizeof(int) + iStreamLen; 
	}

	BYTE* GetStreamData()
	{
		if( m_pStream )
			delete[] m_pStream;

		uDynamicPacketSize =  GetStreamSize();

		m_pStream = new BYTE[ uDynamicPacketSize ];

		memcpy( m_pStream, &bHeader, 1 );
		memcpy( m_pStream+1, &uDynamicPacketSize, 2 );
		memcpy( m_pStream+3, &iStreamLen, 4 );

		if( iStreamLen > 0 )
			memcpy( m_pStream+7, m_pDataSDBStream, iStreamLen );

		return m_pStream;
	}

	BYTE	bHeader;
	WORD    uDynamicPacketSize; // 빌어먹을 클라  DynamicPacketHeader 구조때문에 맞춰줘야한다 -_-;
	int		iStreamLen;
	BYTE*   m_pDataSDBStream;

private:
	BYTE* m_pStream;


} TPacketGCPackageSDB;

#ifdef _IMPROVED_PACKET_ENCRYPTION_
struct TPacketKeyAgreement
{
	static const int MAX_DATA_LEN = 256;
	BYTE bHeader;
	WORD wAgreedLength;
	WORD wDataLength;
	BYTE data[MAX_DATA_LEN];
};

struct TPacketKeyAgreementCompleted
{
	BYTE bHeader;
	BYTE data[3]; // dummy (not used)
};

#endif // _IMPROVED_PACKET_ENCRYPTION_

#define MAX_EFFECT_FILE_NAME 128
typedef struct SPacketGCSpecificEffect
{
	BYTE header;
	DWORD vid;
	char effect_file[MAX_EFFECT_FILE_NAME];
} TPacketGCSpecificEffect;

// 용혼석
enum EDragonSoulRefineWindowRefineType
{
	DragonSoulRefineWindow_UPGRADE,
	DragonSoulRefineWindow_IMPROVEMENT,
	DragonSoulRefineWindow_REFINE,
};

enum EPacketCGDragonSoulSubHeaderType
{
	DS_SUB_HEADER_OPEN,
	DS_SUB_HEADER_CLOSE,
	DS_SUB_HEADER_DO_REFINE_GRADE,
	DS_SUB_HEADER_DO_REFINE_STEP,
	DS_SUB_HEADER_DO_REFINE_STRENGTH,
	DS_SUB_HEADER_REFINE_FAIL,
	DS_SUB_HEADER_REFINE_FAIL_MAX_REFINE,
	DS_SUB_HEADER_REFINE_FAIL_INVALID_MATERIAL,
	DS_SUB_HEADER_REFINE_FAIL_NOT_ENOUGH_MONEY,
	DS_SUB_HEADER_REFINE_FAIL_NOT_ENOUGH_MATERIAL,
	DS_SUB_HEADER_REFINE_FAIL_TOO_MUCH_MATERIAL,
	DS_SUB_HEADER_REFINE_SUCCEED,
};
typedef struct SPacketCGDragonSoulRefine
{
	SPacketCGDragonSoulRefine() : header (HEADER_CG_DRAGON_SOUL_REFINE)
	{}
	BYTE header;
	BYTE bSubType;
	TItemPos ItemGrid[DRAGON_SOUL_REFINE_GRID_SIZE];
} TPacketCGDragonSoulRefine;

typedef struct SPacketGCDragonSoulRefine
{
	SPacketGCDragonSoulRefine() : header(HEADER_GC_DRAGON_SOUL_REFINE)
	{}
	BYTE header;
	BYTE bSubType;
	TItemPos Pos;
} TPacketGCDragonSoulRefine;

typedef struct SPacketCGStateCheck
{
	BYTE header;
	unsigned long key;	
	unsigned long index;
} TPacketCGStateCheck;

typedef struct SPacketGCStateCheck
{
	BYTE header;
	unsigned long key;
	unsigned long index;
	unsigned char state;
} TPacketGCStateCheck;

#ifdef CHANGE_SKILL_COLOR
typedef struct packet_skill_color
{
	BYTE		bheader;
	BYTE		skill;
	DWORD		col1;
	DWORD		col2;
	DWORD		col3;
	DWORD		col4;
	DWORD		col5;
}TPacketCGSkillColor;
#endif

#ifdef __ENABLE_CHANGELOOK_SYSTEM__
enum
{
	CL_SUBHEADER_OPEN = 0,
	CL_SUBHEADER_CLOSE,
	CL_SUBHEADER_ADD,
	CL_SUBHEADER_REMOVE,
	CL_SUBHEADER_REFINE,
};

typedef struct SPacketChangeLook
{
	BYTE	header;
	BYTE	subheader;
	DWORD	dwCost;
	BYTE	bPos;
	TItemPos	tPos;
} TPacketChangeLook;
#endif

#ifdef __ENABLE_SHOP_SEARCH_SYSTEM__
typedef struct packet_priv_shop_item_set
{
	BYTE header;
	DWORD vid;
	BYTE Cell;
	DWORD price;
#ifdef __ENABLE_CHEQUE_SYSTEM__
	DWORD price2;
#endif
	DWORD vnum;
#ifdef ENABLE_NEW_MAX_COUNT
	WORD count;
#else
	BYTE count;
#endif
	DWORD flags;
	DWORD anti_flags;
	long alSockets[ITEM_SOCKET_MAX_NUM];
	TPlayerItemAttribute aAttr[ITEM_ATTRIBUTE_MAX_NUM];
#ifdef __ENABLE_CHANGELOOK_SYSTEM__
	DWORD  transmutation;
#endif
	char	name[CHARACTER_NAME_MAX_LEN];
} TPacketGCShopSearchItemSet;
typedef struct command_shop_search
{
	BYTE        header;
	WORD  Race;
	int   ItemCat;
	int   SubCat;
	int   MinLevel;
	int   MaxLevel;
	int   MinRefine;
	int   MaxRefine;
	unsigned int   MinGold;
	unsigned int   MaxGold;
#ifdef __ENABLE_CHEQUE_SYSTEM__
	unsigned int   MinCheque;
	unsigned int   MaxCheque;
#endif
	char ItemName[SHOP_TAB_NAME_MAX + 1];
} TPacketCGShopSearch;

typedef struct command_shop_search_buy
{
	BYTE        header;
	int32_t  shopVid;
	BYTE   shopItemPos;
} TPacketCGShopSearchBuy;
#endif

#ifdef __ENABLE_EVENT_SYSTEM__
typedef struct packet_event_info
{
	BYTE		bHeader;
	BYTE		event_id;
	bool		isActivate;
} TPacketGCEventInfo;
#endif

#ifdef __ENABLE_SUPPORT_SHAMAN_SYSTEM__
typedef struct TPacketSupportShamanSkill
{
	BYTE	bHeader;
	DWORD	dwVnum;
	DWORD	dwVid;
	DWORD	dwLevel;
}TPacketGCSupportShamanSkill;
#endif

#ifdef __ENABLE_DROP_DIALOG_EX__
typedef struct command_item_delete
{
	BYTE 	header;
	TItemPos 	Cell;
} TPacketCGItemDelete;

typedef struct command_item_sell
{
	BYTE 		header;
	TItemPos 	Cell;
} TPacketCGItemSell;
#endif

#ifdef __SASH_SYSTEM__
enum
{
	SASH_SUBHEADER_GC_OPEN = 0,
	SASH_SUBHEADER_GC_CLOSE,
	SASH_SUBHEADER_GC_ADDED,
	SASH_SUBHEADER_GC_REMOVED,
	SASH_SUBHEADER_CG_REFINED,
	SASH_SUBHEADER_CG_CLOSE = 0,
	SASH_SUBHEADER_CG_ADD,
	SASH_SUBHEADER_CG_REMOVE,
	SASH_SUBHEADER_CG_REFINE,
};

typedef struct SPacketSash
{
	BYTE	header;
	BYTE	subheader;
	bool	bWindow;
	DWORD	dwPrice;
	BYTE	bPos;
	TItemPos	tPos;
	DWORD	dwItemVnum;
	DWORD	dwMinAbs;
	DWORD	dwMaxAbs;
} TPacketSash;
#endif

#ifdef __ENABLE_HEALTH_BOARD_SYSTEM__
typedef struct SPacketGCHealthBoard
{
	BYTE	bHeader;
	DWORD	dwVID;
	DWORD	bHPPercent;
} TPacketGCHealthBoard;
#endif

#ifdef __ENABLE_EXTEND_INVEN_SYSTEM__
typedef struct game_extend_inventory_packet
{
	BYTE	header;
	WORD	size;
	BYTE	subheader;
	int		id;
	int		id1;
	int		id2;
	short	dwExtend_inventory_max;
	short	dwExtend_inventory_stage;
} TPacketGCExtendInventory;

enum
{
	SET_STAGE_EXTEND_INVEN			= 0,
	NOTIFY_EXTEND_INVEN_ITEM_USE	= 1,
	SET_MAX_EXTEND_INVENTORY		= 2,
};

typedef struct command_extend_inventory
{
	BYTE	header;
	BYTE	sub_header;
} TPacketCGExtendInventory;
#endif

#ifdef __ENABLE_EXCHANGE_WINDOW_SYSTEM__
typedef struct packet_exchange_info   // 가변 패킷
{
	BYTE        bHeader;
	WORD        wSize;
	bool        bError;
	int			iUnixTime;
} TPacketGCExchageInfo;
#endif

typedef struct SPacketCGBulkWhisper
{
	BYTE	header;
	char	szText[1024 + 1];
} TPacketCGBulkWhisper;

typedef struct packet_bulk_whisper
{
	BYTE	header;
	WORD	size;
} TPacketGCBulkWhisper;

typedef struct SPacketGGBulkWhisper
{
	BYTE	bHeader;
	long	lSize;
} TPacketGGBulkWhisper;

#ifdef __ENABLE_SHOW_CHEST_DROP__
enum
{
	HEADER_CG_CHEST_DROP_INFO = 235,
	HEADER_GC_CHEST_DROP_INFO = 236,
};

typedef struct SPacketCGChestDropInfo {
	BYTE	header;
	DWORD	ItemVnum;
} TPacketCGChestDropInfo;

typedef struct SChestDropInfoTable {
	BYTE	bPageIndex;
	BYTE	bSlotIndex;
	DWORD	dwItemVnum;
	BYTE	bItemCount;
} TChestDropInfoTable;

typedef struct SPacketGCChestDropInfo {
	BYTE	bHeader;
	WORD	wSize;
	DWORD	dwChestVnum;
} TPacketGCChestDropInfo;
#endif

#ifdef __ENABLE_FISH_EVENT_SYSTEM__
enum
{
	FISH_EVENT_SUBHEADER_BOX_USE,
	FISH_EVENT_SUBHEADER_SHAPE_ADD,
	FISH_EVENT_SUBHEADER_GC_REWARD,
	FISH_EVENT_SUBHEADER_GC_ENABLE,
};

typedef struct SPacketGCFishEvent {
	BYTE	bHeader;
	BYTE	bSubheader;
} TPacketCGFishEvent;

typedef struct SPacketGCFishEventInfo {
	BYTE	bHeader;
	BYTE	bSubheader;
	DWORD	dwFirstArg;
	DWORD	dwSecondArg;
} TPacketGCFishEventInfo;
#endif

#ifdef __ENABLE_MAILBOX_SYSTEM__
enum
{
	MAILBOX_SUB_HEADER_OPEN, //abre gui mailbox
	MAILBOX_SUB_HEADER_CLOSE, //cierra gui mailbox
	MAILBOX_SUB_HEADER_RECEIVE_INFO, // recibe informacion de mensajes a abrir el gui
	MAILBOX_SUB_HEADER_SEND_MAIL, // envia email
	MAILBOX_SUB_HEADER_CHECK_NAME, // envia nombre y lo comprueba
	MAILBOX_SUB_HEADER_CHECK_NAME_SUCCESSFUL, // el nombre es exitoso
	MAILBOX_SUB_HEADER_SEND_MAIL_SUCCESSFUL, // envio email exitoso.
	MAILBOX_SUB_HEADER_ACCEPT_MAIL, //acepta el mensaje 
	MAILBOX_SUB_HEADER_ACCEPT_ALL_MAIL, //acepta todos los mensajes
	MAILBOX_SUB_HEADER_DELETE_MAIL, //elimina el mensaje
	MAILBOX_SUB_HEADER_DELETE_ALL_MAIL, //elimina todos los mensajes
	MAILBOX_SUB_HEADER_CHECK_ACCEPT_SUCCESSFUL, //mensaje aceptado con exito.
	MAILBOX_SUB_HEADER_CHECK_DELETE_SUCCESSFUL, //mensaje eliminado con exito.
	MAILBOX_SUB_HEADER_LOADING_ACCEPT, //carga la lista de mensajes aceptados
	MAILBOX_SUB_HEADER_LOADING_DELETE, // carga la lista de mensajes eliminados
	MAILBOX_SUB_HEADER_VIEW_MAIL, //envia que vio el mensaje
	MAILBOX_SUB_HEADER_CHECK_VIEW_SUCCESSFUL, //se ve el mensaje con exito
};

typedef struct packet_send_mail_box
{
	BYTE header;
	BYTE subheader;
	int id_mail;
	char nombre_pj[12];
	char asunto[25];
	char descrip[100];
	int slot_item;
	int yang;
#ifdef __ENABLE_CHEQUE_SYSTEM__
	int won;
#endif	
} TPacketCGMailBoxSend;

typedef struct SPacketGCMailBoxReceive
{
	SPacketGCMailBoxReceive() : header(HEADER_GC_MAILBOX_RECEIVE)
	{}
	BYTE header;
	BYTE bSubType;
	int id_mail;
	char nombre_pj[12];
	char asunto[25];
	char descrip[100];
	int item_vnum;
	int item_count;
#ifdef __ENABLE_CHANGELOOK_SYSTEM__
	int transmutation;
#endif
	int gold;
#ifdef __ENABLE_CHEQUE_SYSTEM__
	int won;
#endif
	int check_acept;
	DWORD time;
	int check_view;
	//Values Extras
	long    alSockets[ITEM_SOCKET_MAX_NUM];
	TPlayerItemAttribute aAttr[ITEM_ATTRIBUTE_MAX_NUM];

} TPacketGCMailBoxReceive;

#endif

typedef struct SPacketGCUpdatePart
{
	BYTE bHeader;
	BYTE bPart;
	DWORD dwVID;
	DWORD dwVnum;
} TPacketGCUpdatePart;

typedef struct SPacketGGReloadCommand
{
	BYTE	header;
	char	argument[10];
} TPacketGGReloadCommand;

enum EP2PDungeonWarpTypes {
	P2P_DUNGEON_WARP_PLAYER,
	P2P_DUNGEON_WARP_GROUP,
	P2P_DUNGEON_WARP_MAP,
};

typedef struct SPacketGGRequestDungeonWarp
{
	BYTE	header;
	BYTE	bType;
	DWORD	dwPlayerID;
	long	lMapIndex;
	long	lDestX;
	long	lDestY;
} TPacketGGRequestDungeonWarp;

typedef struct SPacketGGAnswerDungeonWarp
{
	BYTE	header;
	BYTE	bType;
	DWORD	dwPlayerID;
	long	lMapIndex;
	long	lDestX;
	long	lDestY;
} TPacketGGAnswerDungeonWarp;

typedef struct SPacketMuzikEvent
{
	BYTE	header;
	long	mode;
} TPacketGGMuzikEvent;

#ifdef __ENABLE_CORE_SHOP_SEARCH_SYSTEM__
typedef struct SPacketShopSearch
{
	BYTE	bHeader;
	WORD	wRace;
	int   	iCat;
	int		iSubCat;
	int		iMinLevel;
	int		iMaxLevel;
	int		iMinRefine;
	int		iMaxRefine;
	unsigned int	iMinGold;
	unsigned int	iMaxGold;
#ifdef __ENABLE_CHEQUE_SYSTEM__
	unsigned int	iMinCheque;
	unsigned int	iMaxCheque;
#endif
	char	szItemName[SHOP_TAB_NAME_MAX + 1];
	bool	bName;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
} TPacketGGShopSearch;

#ifdef __ENABLE_CORE_SHOP_SEARCH_BUY_SYSTEM__
typedef struct SPacketShopSearchBuy
{
	BYTE	bHeader;
	int		iShopVid;
	BYTE	bShopItemPos;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
	int		iGold;
#ifdef __ENABLE_CHEQUE_SYSTEM__
	int		iCheque;
#endif
} TPacketGGShopSearchBuy;

typedef struct SPacketShopSearchBuyResult
{
	BYTE	bHeader;
	BYTE	bResult;
	TItemData TItem;
	DWORD	dwItemID;
	int		iGold;
#ifdef __ENABLE_CHEQUE_SYSTEM__
	int		iCheque;
#endif
} TPacketGGShopSearchBuyResult;
#endif

#endif

#ifdef OFFLINE_SHOP_PM_NOTICE
typedef struct SPacketGGOfflineShopMessage
{
	BYTE	bHeader;
	DWORD	dwTargetPID;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
	char	szItemName[ITEM_NAME_MAX_LEN + 1];
} TPacketGGOfflineShopMessage;
#endif

#ifdef ENABLE_PET_SYSTEM
typedef struct PetSystemCG
{
	BYTE header;
	BYTE InfoPacket;
	WORD wItemSlotPos;
	BYTE bDestSlotPos;
}TPacketCGPet;
typedef struct packet_RequestPetName
{
	BYTE byHeader;
	char petname[13];

}TPacketCGRequestPetName;
typedef struct SPetSystem
{
	BYTE byHeader;
	BYTE SubHeader;
	char bName[13];
	BYTE bLevel;
	DWORD bExp;
	int nextexp;
	BYTE bEvolution;
	DWORD vnum;
	long long duration;

	BYTE PotionAdded[PET_MAX_BONUS_LIST];
	BYTE PotionLeft[PET_MAX_BONUS_LIST];
	BYTE BonusLevel[PET_MAX_BONUS_LIST];

	int SkillVnum[PET_MAX_SKILL];
	int SkillLevel[PET_MAX_SKILL];
	int SkillCoolDown[PET_MAX_SKILL];

	int ManaStatus[PET_MAX_BONUS_LIST];

	//Starting Windows Settings	
	WORD ItemCell;
	long long NecessaryMoney;
	BYTE pos;
	//Ending Windows settings

} TPacketGCPetSystem;
#endif

#ifdef ENABLE_NEW_PET_SYSTEM
typedef struct packet_RequestPetName
{
	BYTE byHeader;
	char petname[13];
}TPacketCGRequestPetName;
#endif

#pragma pack()
#endif
